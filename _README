1. Регистрация - готово
2. Логинизация - готово
3. Создание jwttoken(access/refresh) - готово
4. ВЬІход - готово
5. Создание middleweare (создана проверка на администратора) - готово
6. Обновление refresh токена в БД при логине - готово
7. Email подтверждение - 
8. Добавить .env - 
9. Написать тестЬІ - 

1. Email-подтверждение - <<готово>>

Используй nodemailer для отправки ссылки с токеном.

Создай таблицу email_verifications (user_id, token, expires_at).

Endpoint: /verify-email/:token.



2. Сброс пароля (Forgot / Reset password) - <<готово>>

Через nodemailer отправляй временный токен.

Endpoint /forgot-password и /reset-password/:token.

Храни токен в БД, TTL = 15–30 мин.



4. Хеширование refresh-токенов - <<готово>>

Не храни refresh в открытом виде — хешируй через bcryptjs.


5. .env конфигурация

Добавь dotenv (очень лёгкий пакет).

Сохрани JWT_SECRET, SMTP_USER, SMTP_PASS, DB_PATH.




---

⚙️ 2. Следующие шаги — с установкой новых пакетов

(чтобы проект выглядел production-ready)

1. Логирование (winston / pino)

npm i winston

Логи запросов и ошибок в файл /logs/app.log.



2. Валидация через Zod или Joi

npm i zod

Централизуй проверки входных данных.



3. Документация API (Swagger)

npm i swagger-ui-express swagger-jsdoc

Endpoint /docs → автоматически генерирует описание API.



4. Rate-limiting middleware

npm i express-rate-limit

Ограничение на кол-во попыток входа/IP.



5. Роли и права (RBAC)

Таблицы: roles, permissions, user_roles.

Middleware для проверки ролей.



6. CORS + безопасность

npm i cors helmet

Добавь защиту заголовков и настрой разрешённые источники.
